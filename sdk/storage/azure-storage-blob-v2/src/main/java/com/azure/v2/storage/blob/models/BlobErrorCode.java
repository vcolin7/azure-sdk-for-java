// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.v2.storage.blob.models;

import io.clientcore.core.utils.ExpandableEnum;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;

/**
 * Error codes returned by the service.
 */
public final class BlobErrorCode implements ExpandableEnum<String> {
    private static final Map<String, BlobErrorCode> VALUES = new ConcurrentHashMap<>();

    private static final Function<String, BlobErrorCode> NEW_INSTANCE = BlobErrorCode::new;

    /**
     * Static value AccountAlreadyExists for BlobErrorCode.
     */
    public static final BlobErrorCode ACCOUNT_ALREADY_EXISTS = fromValue("AccountAlreadyExists");

    /**
     * Static value AccountBeingCreated for BlobErrorCode.
     */
    public static final BlobErrorCode ACCOUNT_BEING_CREATED = fromValue("AccountBeingCreated");

    /**
     * Static value AccountIsDisabled for BlobErrorCode.
     */
    public static final BlobErrorCode ACCOUNT_IS_DISABLED = fromValue("AccountIsDisabled");

    /**
     * Static value AuthenticationFailed for BlobErrorCode.
     */
    public static final BlobErrorCode AUTHENTICATION_FAILED = fromValue("AuthenticationFailed");

    /**
     * Static value AuthorizationFailure for BlobErrorCode.
     */
    public static final BlobErrorCode AUTHORIZATION_FAILURE = fromValue("AuthorizationFailure");

    /**
     * Static value ConditionHeadersNotSupported for BlobErrorCode.
     */
    public static final BlobErrorCode CONDITION_HEADERS_NOT_SUPPORTED = fromValue("ConditionHeadersNotSupported");

    /**
     * Static value ConditionNotMet for BlobErrorCode.
     */
    public static final BlobErrorCode CONDITION_NOT_MET = fromValue("ConditionNotMet");

    /**
     * Static value EmptyMetadataKey for BlobErrorCode.
     */
    public static final BlobErrorCode EMPTY_METADATA_KEY = fromValue("EmptyMetadataKey");

    /**
     * Static value InsufficientAccountPermissions for BlobErrorCode.
     */
    public static final BlobErrorCode INSUFFICIENT_ACCOUNT_PERMISSIONS = fromValue("InsufficientAccountPermissions");

    /**
     * Static value InternalError for BlobErrorCode.
     */
    public static final BlobErrorCode INTERNAL_ERROR = fromValue("InternalError");

    /**
     * Static value InvalidAuthenticationInfo for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_AUTHENTICATION_INFO = fromValue("InvalidAuthenticationInfo");

    /**
     * Static value InvalidHeaderValue for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_HEADER_VALUE = fromValue("InvalidHeaderValue");

    /**
     * Static value InvalidHttpVerb for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_HTTP_VERB = fromValue("InvalidHttpVerb");

    /**
     * Static value InvalidInput for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_INPUT = fromValue("InvalidInput");

    /**
     * Static value InvalidMd5 for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_MD5 = fromValue("InvalidMd5");

    /**
     * Static value InvalidMetadata for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_METADATA = fromValue("InvalidMetadata");

    /**
     * Static value InvalidQueryParameterValue for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_QUERY_PARAMETER_VALUE = fromValue("InvalidQueryParameterValue");

    /**
     * Static value InvalidRange for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_RANGE = fromValue("InvalidRange");

    /**
     * Static value InvalidResourceName for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_RESOURCE_NAME = fromValue("InvalidResourceName");

    /**
     * Static value InvalidUri for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_URI = fromValue("InvalidUri");

    /**
     * Static value InvalidXmlDocument for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_XML_DOCUMENT = fromValue("InvalidXmlDocument");

    /**
     * Static value InvalidXmlNodeValue for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_XML_NODE_VALUE = fromValue("InvalidXmlNodeValue");

    /**
     * Static value Md5Mismatch for BlobErrorCode.
     */
    public static final BlobErrorCode MD5MISMATCH = fromValue("Md5Mismatch");

    /**
     * Static value MetadataTooLarge for BlobErrorCode.
     */
    public static final BlobErrorCode METADATA_TOO_LARGE = fromValue("MetadataTooLarge");

    /**
     * Static value MissingContentLengthHeader for BlobErrorCode.
     */
    public static final BlobErrorCode MISSING_CONTENT_LENGTH_HEADER = fromValue("MissingContentLengthHeader");

    /**
     * Static value MissingRequiredQueryParameter for BlobErrorCode.
     */
    public static final BlobErrorCode MISSING_REQUIRED_QUERY_PARAMETER = fromValue("MissingRequiredQueryParameter");

    /**
     * Static value MissingRequiredHeader for BlobErrorCode.
     */
    public static final BlobErrorCode MISSING_REQUIRED_HEADER = fromValue("MissingRequiredHeader");

    /**
     * Static value MissingRequiredXmlNode for BlobErrorCode.
     */
    public static final BlobErrorCode MISSING_REQUIRED_XML_NODE = fromValue("MissingRequiredXmlNode");

    /**
     * Static value MultipleConditionHeadersNotSupported for BlobErrorCode.
     */
    public static final BlobErrorCode MULTIPLE_CONDITION_HEADERS_NOT_SUPPORTED
        = fromValue("MultipleConditionHeadersNotSupported");

    /**
     * Static value OperationTimedOut for BlobErrorCode.
     */
    public static final BlobErrorCode OPERATION_TIMED_OUT = fromValue("OperationTimedOut");

    /**
     * Static value OutOfRangeInput for BlobErrorCode.
     */
    public static final BlobErrorCode OUT_OF_RANGE_INPUT = fromValue("OutOfRangeInput");

    /**
     * Static value OutOfRangeQueryParameterValue for BlobErrorCode.
     */
    public static final BlobErrorCode OUT_OF_RANGE_QUERY_PARAMETER_VALUE = fromValue("OutOfRangeQueryParameterValue");

    /**
     * Static value RequestBodyTooLarge for BlobErrorCode.
     */
    public static final BlobErrorCode REQUEST_BODY_TOO_LARGE = fromValue("RequestBodyTooLarge");

    /**
     * Static value ResourceTypeMismatch for BlobErrorCode.
     */
    public static final BlobErrorCode RESOURCE_TYPE_MISMATCH = fromValue("ResourceTypeMismatch");

    /**
     * Static value RequestUrlFailedToParse for BlobErrorCode.
     */
    public static final BlobErrorCode REQUEST_URL_FAILED_TO_PARSE = fromValue("RequestUrlFailedToParse");

    /**
     * Static value ResourceAlreadyExists for BlobErrorCode.
     */
    public static final BlobErrorCode RESOURCE_ALREADY_EXISTS = fromValue("ResourceAlreadyExists");

    /**
     * Static value ResourceNotFound for BlobErrorCode.
     */
    public static final BlobErrorCode RESOURCE_NOT_FOUND = fromValue("ResourceNotFound");

    /**
     * Static value ServerBusy for BlobErrorCode.
     */
    public static final BlobErrorCode SERVER_BUSY = fromValue("ServerBusy");

    /**
     * Static value UnsupportedHeader for BlobErrorCode.
     */
    public static final BlobErrorCode UNSUPPORTED_HEADER = fromValue("UnsupportedHeader");

    /**
     * Static value UnsupportedXmlNode for BlobErrorCode.
     */
    public static final BlobErrorCode UNSUPPORTED_XML_NODE = fromValue("UnsupportedXmlNode");

    /**
     * Static value UnsupportedQueryParameter for BlobErrorCode.
     */
    public static final BlobErrorCode UNSUPPORTED_QUERY_PARAMETER = fromValue("UnsupportedQueryParameter");

    /**
     * Static value UnsupportedHttpVerb for BlobErrorCode.
     */
    public static final BlobErrorCode UNSUPPORTED_HTTP_VERB = fromValue("UnsupportedHttpVerb");

    /**
     * Static value AppendPositionConditionNotMet for BlobErrorCode.
     */
    public static final BlobErrorCode APPEND_POSITION_CONDITION_NOT_MET = fromValue("AppendPositionConditionNotMet");

    /**
     * Static value BlobAlreadyExists for BlobErrorCode.
     */
    public static final BlobErrorCode BLOB_ALREADY_EXISTS = fromValue("BlobAlreadyExists");

    /**
     * Static value BlobImmutableDueToPolicy for BlobErrorCode.
     */
    public static final BlobErrorCode BLOB_IMMUTABLE_DUE_TO_POLICY = fromValue("BlobImmutableDueToPolicy");

    /**
     * Static value BlobNotFound for BlobErrorCode.
     */
    public static final BlobErrorCode BLOB_NOT_FOUND = fromValue("BlobNotFound");

    /**
     * Static value BlobOverwritten for BlobErrorCode.
     */
    public static final BlobErrorCode BLOB_OVERWRITTEN = fromValue("BlobOverwritten");

    /**
     * Static value BlobTierInadequateForContentLength for BlobErrorCode.
     */
    public static final BlobErrorCode BLOB_TIER_INADEQUATE_FOR_CONTENT_LENGTH
        = fromValue("BlobTierInadequateForContentLength");

    /**
     * Static value BlobUsesCustomerSpecifiedEncryption for BlobErrorCode.
     */
    public static final BlobErrorCode BLOB_USES_CUSTOMER_SPECIFIED_ENCRYPTION
        = fromValue("BlobUsesCustomerSpecifiedEncryption");

    /**
     * Static value BlockCountExceedsLimit for BlobErrorCode.
     */
    public static final BlobErrorCode BLOCK_COUNT_EXCEEDS_LIMIT = fromValue("BlockCountExceedsLimit");

    /**
     * Static value BlockListTooLong for BlobErrorCode.
     */
    public static final BlobErrorCode BLOCK_LIST_TOO_LONG = fromValue("BlockListTooLong");

    /**
     * Static value CannotChangeToLowerTier for BlobErrorCode.
     */
    public static final BlobErrorCode CANNOT_CHANGE_TO_LOWER_TIER = fromValue("CannotChangeToLowerTier");

    /**
     * Static value CannotVerifyCopySource for BlobErrorCode.
     */
    public static final BlobErrorCode CANNOT_VERIFY_COPY_SOURCE = fromValue("CannotVerifyCopySource");

    /**
     * Static value ContainerAlreadyExists for BlobErrorCode.
     */
    public static final BlobErrorCode CONTAINER_ALREADY_EXISTS = fromValue("ContainerAlreadyExists");

    /**
     * Static value ContainerBeingDeleted for BlobErrorCode.
     */
    public static final BlobErrorCode CONTAINER_BEING_DELETED = fromValue("ContainerBeingDeleted");

    /**
     * Static value ContainerDisabled for BlobErrorCode.
     */
    public static final BlobErrorCode CONTAINER_DISABLED = fromValue("ContainerDisabled");

    /**
     * Static value ContainerNotFound for BlobErrorCode.
     */
    public static final BlobErrorCode CONTAINER_NOT_FOUND = fromValue("ContainerNotFound");

    /**
     * Static value ContentLengthLargerThanTierLimit for BlobErrorCode.
     */
    public static final BlobErrorCode CONTENT_LENGTH_LARGER_THAN_TIER_LIMIT
        = fromValue("ContentLengthLargerThanTierLimit");

    /**
     * Static value CopyAcrossAccountsNotSupported for BlobErrorCode.
     */
    public static final BlobErrorCode COPY_ACROSS_ACCOUNTS_NOT_SUPPORTED = fromValue("CopyAcrossAccountsNotSupported");

    /**
     * Static value CopyIdMismatch for BlobErrorCode.
     */
    public static final BlobErrorCode COPY_ID_MISMATCH = fromValue("CopyIdMismatch");

    /**
     * Static value FeatureVersionMismatch for BlobErrorCode.
     */
    public static final BlobErrorCode FEATURE_VERSION_MISMATCH = fromValue("FeatureVersionMismatch");

    /**
     * Static value IncrementalCopyBlobMismatch for BlobErrorCode.
     */
    public static final BlobErrorCode INCREMENTAL_COPY_BLOB_MISMATCH = fromValue("IncrementalCopyBlobMismatch");

    /**
     * Static value IncrementalCopyOfEarlierVersionSnapshotNotAllowed for BlobErrorCode.
     */
    public static final BlobErrorCode INCREMENTAL_COPY_OF_EARLIER_VERSION_SNAPSHOT_NOT_ALLOWED
        = fromValue("IncrementalCopyOfEarlierVersionSnapshotNotAllowed");

    /**
     * Static value IncrementalCopySourceMustBeSnapshot for BlobErrorCode.
     */
    public static final BlobErrorCode INCREMENTAL_COPY_SOURCE_MUST_BE_SNAPSHOT
        = fromValue("IncrementalCopySourceMustBeSnapshot");

    /**
     * Static value InfiniteLeaseDurationRequired for BlobErrorCode.
     */
    public static final BlobErrorCode INFINITE_LEASE_DURATION_REQUIRED = fromValue("InfiniteLeaseDurationRequired");

    /**
     * Static value InvalidBlobOrBlock for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_BLOB_OR_BLOCK = fromValue("InvalidBlobOrBlock");

    /**
     * Static value InvalidBlobTier for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_BLOB_TIER = fromValue("InvalidBlobTier");

    /**
     * Static value InvalidBlobType for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_BLOB_TYPE = fromValue("InvalidBlobType");

    /**
     * Static value InvalidBlockId for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_BLOCK_ID = fromValue("InvalidBlockId");

    /**
     * Static value InvalidBlockList for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_BLOCK_LIST = fromValue("InvalidBlockList");

    /**
     * Static value InvalidOperation for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_OPERATION = fromValue("InvalidOperation");

    /**
     * Static value InvalidPageRange for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_PAGE_RANGE = fromValue("InvalidPageRange");

    /**
     * Static value InvalidSourceBlobType for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_SOURCE_BLOB_TYPE = fromValue("InvalidSourceBlobType");

    /**
     * Static value InvalidSourceBlobUrl for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_SOURCE_BLOB_URL = fromValue("InvalidSourceBlobUrl");

    /**
     * Static value InvalidVersionForPageBlobOperation for BlobErrorCode.
     */
    public static final BlobErrorCode INVALID_VERSION_FOR_PAGE_BLOB_OPERATION
        = fromValue("InvalidVersionForPageBlobOperation");

    /**
     * Static value LeaseAlreadyPresent for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_ALREADY_PRESENT = fromValue("LeaseAlreadyPresent");

    /**
     * Static value LeaseAlreadyBroken for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_ALREADY_BROKEN = fromValue("LeaseAlreadyBroken");

    /**
     * Static value LeaseIdMismatchWithBlobOperation for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_ID_MISMATCH_WITH_BLOB_OPERATION
        = fromValue("LeaseIdMismatchWithBlobOperation");

    /**
     * Static value LeaseIdMismatchWithContainerOperation for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_ID_MISMATCH_WITH_CONTAINER_OPERATION
        = fromValue("LeaseIdMismatchWithContainerOperation");

    /**
     * Static value LeaseIdMismatchWithLeaseOperation for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_ID_MISMATCH_WITH_LEASE_OPERATION
        = fromValue("LeaseIdMismatchWithLeaseOperation");

    /**
     * Static value LeaseIdMissing for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_ID_MISSING = fromValue("LeaseIdMissing");

    /**
     * Static value LeaseIsBreakingAndCannotBeAcquired for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_IS_BREAKING_AND_CANNOT_BE_ACQUIRED
        = fromValue("LeaseIsBreakingAndCannotBeAcquired");

    /**
     * Static value LeaseIsBreakingAndCannotBeChanged for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_IS_BREAKING_AND_CANNOT_BE_CHANGED
        = fromValue("LeaseIsBreakingAndCannotBeChanged");

    /**
     * Static value LeaseIsBrokenAndCannotBeRenewed for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_IS_BROKEN_AND_CANNOT_BE_RENEWED
        = fromValue("LeaseIsBrokenAndCannotBeRenewed");

    /**
     * Static value LeaseLost for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_LOST = fromValue("LeaseLost");

    /**
     * Static value LeaseNotPresentWithBlobOperation for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_NOT_PRESENT_WITH_BLOB_OPERATION
        = fromValue("LeaseNotPresentWithBlobOperation");

    /**
     * Static value LeaseNotPresentWithContainerOperation for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_NOT_PRESENT_WITH_CONTAINER_OPERATION
        = fromValue("LeaseNotPresentWithContainerOperation");

    /**
     * Static value LeaseNotPresentWithLeaseOperation for BlobErrorCode.
     */
    public static final BlobErrorCode LEASE_NOT_PRESENT_WITH_LEASE_OPERATION
        = fromValue("LeaseNotPresentWithLeaseOperation");

    /**
     * Static value MaxBlobSizeConditionNotMet for BlobErrorCode.
     */
    public static final BlobErrorCode MAX_BLOB_SIZE_CONDITION_NOT_MET = fromValue("MaxBlobSizeConditionNotMet");

    /**
     * Static value NoAuthenticationInformation for BlobErrorCode.
     */
    public static final BlobErrorCode NO_AUTHENTICATION_INFORMATION = fromValue("NoAuthenticationInformation");

    /**
     * Static value NoPendingCopyOperation for BlobErrorCode.
     */
    public static final BlobErrorCode NO_PENDING_COPY_OPERATION = fromValue("NoPendingCopyOperation");

    /**
     * Static value OperationNotAllowedOnIncrementalCopyBlob for BlobErrorCode.
     */
    public static final BlobErrorCode OPERATION_NOT_ALLOWED_ON_INCREMENTAL_COPY_BLOB
        = fromValue("OperationNotAllowedOnIncrementalCopyBlob");

    /**
     * Static value PendingCopyOperation for BlobErrorCode.
     */
    public static final BlobErrorCode PENDING_COPY_OPERATION = fromValue("PendingCopyOperation");

    /**
     * Static value PreviousSnapshotCannotBeNewer for BlobErrorCode.
     */
    public static final BlobErrorCode PREVIOUS_SNAPSHOT_CANNOT_BE_NEWER = fromValue("PreviousSnapshotCannotBeNewer");

    /**
     * Static value PreviousSnapshotNotFound for BlobErrorCode.
     */
    public static final BlobErrorCode PREVIOUS_SNAPSHOT_NOT_FOUND = fromValue("PreviousSnapshotNotFound");

    /**
     * Static value PreviousSnapshotOperationNotSupported for BlobErrorCode.
     */
    public static final BlobErrorCode PREVIOUS_SNAPSHOT_OPERATION_NOT_SUPPORTED
        = fromValue("PreviousSnapshotOperationNotSupported");

    /**
     * Static value SequenceNumberConditionNotMet for BlobErrorCode.
     */
    public static final BlobErrorCode SEQUENCE_NUMBER_CONDITION_NOT_MET = fromValue("SequenceNumberConditionNotMet");

    /**
     * Static value SequenceNumberIncrementTooLarge for BlobErrorCode.
     */
    public static final BlobErrorCode SEQUENCE_NUMBER_INCREMENT_TOO_LARGE
        = fromValue("SequenceNumberIncrementTooLarge");

    /**
     * Static value SnapshotCountExceeded for BlobErrorCode.
     */
    public static final BlobErrorCode SNAPSHOT_COUNT_EXCEEDED = fromValue("SnapshotCountExceeded");

    /**
     * Static value SnapshotOperationRateExceeded for BlobErrorCode.
     */
    public static final BlobErrorCode SNAPSHOT_OPERATION_RATE_EXCEEDED = fromValue("SnapshotOperationRateExceeded");

    /**
     * Static value SnapshotsPresent for BlobErrorCode.
     */
    public static final BlobErrorCode SNAPSHOTS_PRESENT = fromValue("SnapshotsPresent");

    /**
     * Static value SourceConditionNotMet for BlobErrorCode.
     */
    public static final BlobErrorCode SOURCE_CONDITION_NOT_MET = fromValue("SourceConditionNotMet");

    /**
     * Static value SystemInUse for BlobErrorCode.
     */
    public static final BlobErrorCode SYSTEM_IN_USE = fromValue("SystemInUse");

    /**
     * Static value TargetConditionNotMet for BlobErrorCode.
     */
    public static final BlobErrorCode TARGET_CONDITION_NOT_MET = fromValue("TargetConditionNotMet");

    /**
     * Static value UnauthorizedBlobOverwrite for BlobErrorCode.
     */
    public static final BlobErrorCode UNAUTHORIZED_BLOB_OVERWRITE = fromValue("UnauthorizedBlobOverwrite");

    /**
     * Static value BlobBeingRehydrated for BlobErrorCode.
     */
    public static final BlobErrorCode BLOB_BEING_REHYDRATED = fromValue("BlobBeingRehydrated");

    /**
     * Static value BlobArchived for BlobErrorCode.
     */
    public static final BlobErrorCode BLOB_ARCHIVED = fromValue("BlobArchived");

    /**
     * Static value BlobNotArchived for BlobErrorCode.
     */
    public static final BlobErrorCode BLOB_NOT_ARCHIVED = fromValue("BlobNotArchived");

    /**
     * Static value AuthorizationSourceIPMismatch for BlobErrorCode.
     */
    public static final BlobErrorCode AUTHORIZATION_SOURCE_IPMISMATCH = fromValue("AuthorizationSourceIPMismatch");

    /**
     * Static value AuthorizationProtocolMismatch for BlobErrorCode.
     */
    public static final BlobErrorCode AUTHORIZATION_PROTOCOL_MISMATCH = fromValue("AuthorizationProtocolMismatch");

    /**
     * Static value AuthorizationPermissionMismatch for BlobErrorCode.
     */
    public static final BlobErrorCode AUTHORIZATION_PERMISSION_MISMATCH = fromValue("AuthorizationPermissionMismatch");

    /**
     * Static value AuthorizationServiceMismatch for BlobErrorCode.
     */
    public static final BlobErrorCode AUTHORIZATION_SERVICE_MISMATCH = fromValue("AuthorizationServiceMismatch");

    /**
     * Static value AuthorizationResourceTypeMismatch for BlobErrorCode.
     */
    public static final BlobErrorCode AUTHORIZATION_RESOURCE_TYPE_MISMATCH
        = fromValue("AuthorizationResourceTypeMismatch");

    /**
     * Static value BlobAccessTierNotSupportedForAccountType for BlobErrorCode.
     */
    public static final BlobErrorCode BLOB_ACCESS_TIER_NOT_SUPPORTED_FOR_ACCOUNT_TYPE
        = fromValue("BlobAccessTierNotSupportedForAccountType");

    /**
     * Static value SnaphotOperationRateExceeded for BlobErrorCode.
     */
    public static final BlobErrorCode SNAPHOT_OPERATION_RATE_EXCEEDED = fromValue("SnaphotOperationRateExceeded");

    /**
     * Static value IncrementalCopyOfEralierVersionSnapshotNotAllowed for BlobErrorCode.
     */
    public static final BlobErrorCode INCREMENTAL_COPY_OF_ERALIER_VERSION_SNAPSHOT_NOT_ALLOWED
        = fromValue("IncrementalCopyOfEralierVersionSnapshotNotAllowed");

    private final String value;

    private BlobErrorCode(String value) {
        this.value = value;
    }

    /**
     * Creates or finds a BlobErrorCode.
     * 
     * @param value a value to look for.
     * @return the corresponding BlobErrorCode.
     * @throws IllegalArgumentException if value is null.
     */
    public static BlobErrorCode fromValue(String value) {
        if (value == null) {
            throw new IllegalArgumentException("'value' cannot be null.");
        }
        return VALUES.computeIfAbsent(value, NEW_INSTANCE);
    }

    /**
     * Gets known BlobErrorCode values.
     * 
     * @return Known BlobErrorCode values.
     */
    public static Collection<BlobErrorCode> values() {
        return new ArrayList<>(VALUES.values());
    }

    /**
     * Gets the value of the BlobErrorCode instance.
     * 
     * @return the value of the BlobErrorCode instance.
     */
    @Override
    public String getValue() {
        return this.value;
    }

    @Override
    public String toString() {
        return Objects.toString(this.value);
    }

    @Override
    public boolean equals(Object obj) {
        return this == obj;
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }
}
